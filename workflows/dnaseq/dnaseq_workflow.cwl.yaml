#!/usr/bin/env cwl-runner

class: Workflow

inputs:
  - id: "#bam_path"
    type: File
  - id: "#fastq1_path" # temp for testing
    type: File
  - id: "#fastq2_path" # temp for testing
    type: File
  - id: "#readgroup_json_path" # temp for testing
    type: File
  - id: "#reference_fasta_path"
    type: File
  - id: "#thread_count"
    type: string
  - id: "#uuid"
    type: string
  - id: "#db_cred_s3url"
    type: ["null", string]
  - id: "#s3cfg_path"
    type: ["null", File]
  - id: "#input_bam" # temp for testing
    type:
      type: array
      items: File
    
outputs:
  - id: "#output_bam"
    type:
      type: array
      items: File
    source: "#bwa_pe.output_bam"

requirements:
  - class: ScatterFeatureRequirement
    
steps:
    - id: "#bwa_pe"
      run: {import: ../../tools/bwa_pe.cwl.yaml}
      inputs:
        - id: "#bwa_pe.fastq1_path"
          source: "#fastq1_path"
        - id: "#bwa_pe.fastq2_path"
          source: "#fastq2_path"
        - id: "#bwa_pe.reference_fasta_path"
          source: "#reference_fasta_path"
        - id: "#bwa_pe.readgroup_json_path"
          source: "#readgroup_json_path"
        - id: "#bwa_pe.thread_count"
          source: "#thread_count"
        - id: "#bwa_pe.uuid"
          source: "#uuid"
      outputs:
        - id: "#bwa_pe.output_bam"

#  - id: "#picard_sortsam"
#    run: {import: ../../tools/picard_sortsam.cwl.yaml}
#    scatter: "#picard_sortsam.bam_path"
#    inputs:
#      - id: "#picard_sortsam.bam_path"
#        source: "#input_bam"
#      - id: "#uuid"
#        source: "#uuid"
#    outputs:
#      - id: "#picard_sortsam.output_bam"

  # - id: "#biobambam2_bamtofastq"
  #   run: {import: ../../tools/biobambam2_bamtofastq.cwl.yaml}
  #   inputs:
  #     - id: "#biobambam2_bamtofastq.bam_path"
  #       source: "#bam_path"
  #     - id: "#biobambam2_bamtofastq.uuid"
  #       source: "#uuid"
  #   outputs:
  #     - id: "#biobambam2_bamtofastq.output_fastq"

  # - id: "#bam_readgroup_to_json"
  #   run: {import: ../../tools/bam_readgroup_to_json.cwl.yaml}
  #   inputs:
  #     - id: "#bam_readgroup_to_json.bam_path"
  #       source: "#bam_path"
  #     - id: "#bam_readgroup_to_json.uuid"
  #       source: "#uuid"
  #   outputs:
  #     - id: "#bam_readgroup_to_json.output_json"


  # - id: "#picard_merge"
  #   run: {import: ../../tools/gatk_printreads.cwl.yaml}
  #   inputs:
  #     - id: "#picard_merge.bam_path"
  #       source: "#picard_sortsam.output_bam"
  #     - id: "#picard_merge.uuid"
  #       source: "#uuid"
  #     - id: "#picard_merge.outbam_name"
  #       source:
  #         engine: node-engine.cwl
  #         script: |
  #           {
  #           return $job['bam_path'].path.split('/').slice(-1)[0];
  #           }
  #   outputs:
  #     - id: "#picard_merge.output_bam"

  # - id: "#bam_reheader"
  #   run: {import: ../../tools/bam_reheader.cwl.yaml}
  #   inputs:
  #     - id: "#bam_reheader.bam_path"
  #       source: "#picard_merge.output_bam"
  #     - id: "#bam_reheader.uuid"
  #       source: "#uuid"
  #   outputs:
  #     - id: "#bam_reheader.output_bam"

  # - id: "#picard_markduplicates"
  #   run: {import: ../../tools/picard_markduplicates.cwl.yaml}
  #   inputs:
  #     - id: "#picard_markduplicates.bam_path"
  #       source: "#bam_reheader.output_bam"
  #     - id: "#picard_markduplicates.uuid"
  #       source: "#uuid"
  #   outputs:
  #     - id: "#picard_markduplicates.output_bam"

  baseCommand: []
