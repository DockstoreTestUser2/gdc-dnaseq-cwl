#!/usr/bin/env cwl-runner

cwlVersion: cwl:draft-3

requirements:
  - class: InlineJavascriptRequirement
  - class: CreateFileRequirement
    fileDef:
      - filename: |
          ${
            var fq_se_array = [];
            for (var i = 0; i < inputs.fastq_se_path.length; i++) {
              var file_name = inputs.fastq_se_path[i].path.split('/').slice(-1)[0];
              fq_se_array.concat(file_name);
           }
          return fq_se_array
          }
        fileContent: $(inputs.fastq_se_path)
      - filename: |
          ${
            var file_array = [];
            for (var i = 0; i < inputs.fastq_se_path.length; i++) {
              readgroup_name = inputs.fastq_se_path[i].path.split('/').slice(-1)[0].slice(0,-8) + ".json";
              file_array.concat(readgroup_name);
            }
            return file_array
           }
        fileContent: |
          ${
            var path_array = [];
            var array_dirname = inputs.readgroup_path[0].path.match( /.*// );
            for (var i = 0; i < inputs.fastq_se_path.length; i++) {
              readgroup_name = inputs.fastq_se_path[i].path.split('/').slice(-1)[0].slice(0,-8) + ".json";
              readgroup_path = array_dirname + '/' + readgroup_name;
              path_array.concat(readgroup_path);
            }
            return path_array
          }

class: CommandLineTool

inputs:
  - id: fastq_se_path
    type:
      type: array
      items: File

  - id: readgroup_path
    type:
      type: array
      items: File

outputs:
  - id: output_fqse_path
    type:
      type: array
      items: File
    outputBinding:
      glob: "*_s.fq.gz"
      outputEval: $( self.sort(function(a,b) { return a.path > b.path }) )

  - id: output_rg_se_path
    type:
      type: array
      items: File
    outputBinding:
      glob: "*.json"
      outputEval: $( self.sort(function(a,b) { return a.path > b.path }) )
      

baseCommand: ["true"]
