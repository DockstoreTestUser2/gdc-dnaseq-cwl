#!/usr/bin/env cwl-runner

cwlVersion: v1.0

requirements:
  - class: InlineJavascriptRequirement

class: ExpressionTool

inputs:
  - id: fastq1_path
    format: "edam:format_2182"
    type:
      type: array
      items: File

  - id: fastq2_path
    format: "edam:format_2182"
    type:
      type: array
      items: File

  - id: readgroup_path
    format: "edam:format_3464"
    type:
      type: array
      items: File

outputs:
  - id: output_fastq1_paths
    format: "edam:format_2182"
    type:
      type: array
      items: File

  - id: output_fastq2_paths
    format: "edam:format_2182"
    type:
      type: array
      items: File

  - id: output_readgroup_paths
    format: "edam:format_3464"
    type:
      type: array
      items: File

expression: |
   ${
      function include(arr,obj) {
        return (arr.indexOf(obj) != -1)
      }

      function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
      }

      function local_basename(path) {
        var basename = path.split(/[\\/]/).pop();
        return basename
      }

      function local_dirname(path) {
        return path.replace(/\\/g,'/').replace(/\/[^\/]*$/, '');
      }

      // get predicted readgroup basenames from fastq1
      var readgroup_basename_array = [];
      for (var i = 0; i < inputs.fastq1_path.length; i++) {
        var fq1_path = inputs.fastq1_path[i];
        var fq_name = local_basename(fq1_path.location);
        var readgroup_name = fq_name.slice(0,-8) + ".json";
        readgroup_basename_array.push(readgroup_name);
      }

      // find which readgroup items are in predicted basenames
      var readgroup_array = [];
      for (var i = 0; i < inputs.readgroup_path.length; i++) {
        var readgroup_path = inputs.readgroup_path[i];
        var readgroup_basename = local_basename(readgroup_path.location);
        if (include(readgroup_basename_array, readgroup_basename)) {
          readgroup_array.push(readgroup_path);
        }
      }

      var fastq1_sorted = inputs.fastq1_path.sort(function(a,b) { return a.location > b.location } )
      var fastq2_sorted = inputs.fastq2_path.sort(function(a,b) { return a.location > b.location } )
      var readgroup_sorted = readgroup_array.sort(function(a,b) { return a.location > b.location } )

      return [
        {'output_fastq1_paths': fastq1_sorted},
        {'output_fastq2_paths': fastq2_sorted},
        {'output_readgroup_paths': readgroup_sorted}
      ]
    }
