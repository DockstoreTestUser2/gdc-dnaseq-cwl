#!/usr/bin/env cwl-runner

description: |
  Usage:  cwl-runner <this-file-path> --bam_path <bam-path> --reference_fasta_path <reference-fasta-path> --uuid <uuid-string>
  Options:
    --bam_path       Generate metrics from BAM file
    --uuid           UUID for log file and sqlite db file

requirements:
  - import: node-engine.cwl
  - import: envvar-global.cwl
  - class: DockerRequirement
    dockerPull: quay.io/jeremiahsavage/picard_tool

class: CommandLineTool

inputs:
  - id: "#input_bam"
    type: File
    inputBinding:
      prefix: --bam_path

  - id: "reference"
    type: File
    inputBinding:
      prefix: --reference_fasta_path

  - id: "#uuid"
    type: string
    inputBinding:
      prefix: --uuid
      
outputs:
  - id: "#output_sqlite"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return $job['uuid']+".db"
          }

  - id: "#log"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return $job['uuid']+"_picard_CollectMultipleMetrics.log"
          }
  
  - id: "#alignment_summary_metrics"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".alignment_summary_metrics" ;
          }

  - id: "#base_distribution_by_cycle_metrics"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".base_distribution_by_cycle_metrics";
          }

  - id: "#base_distribution_by_cycle_pdf"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".base_distribution_by_cycle.pdf";
          }

  - id: "#gc_bias_detail_metrics"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".gc_bias.detail_metrics";
          }

  - id: "#gc_bias_pdf"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {          
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".gc_bias.pdf";
          }

  - id: "#gc_bias_summary_metrics"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".gc_bias.summary_metrics";
          }

  - id: "#insert_size_histogram_pdf"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".insert_size_histogram.pdf";
          }

  - id: "#insert_size_metrics"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".insert_size_metrics";
          }

  - id: "#quality_by_cycle_metrics"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".quality_by_cycle_metrics";
          }

  - id: "#quality_by_cycle_pdf"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".quality_by_cycle.pdf";
          }

  - id: "#quality_distribution_metrics"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".quality_distribution_metrics";
          }

  - id: "#quality_distribution_pdf"
    type: File
    outputBinding:
      glob:
        engine: node-engine.cwl
        script: |
          {
          return "picard_CollectMultipleMetrics_"+$job['bam_path'].path.split('/').slice(-1)[0].slice(0,-4)+".quality_distribution.pdf";
          }

baseCommand: ["/home/ubuntu/.virtualenvs/p3/bin/python", "/home/ubuntu/picard_tool/main.py", "--tool_name", "CollectMultipleMetrics"]